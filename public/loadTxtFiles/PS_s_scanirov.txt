Министерство науки и высшего образования Российской Федерации 

Федеральное государственное бюджетное образовательное учреждение 
высшего образования 

ИРКУТСКИЙ НАЦИОНАЛЬНЫЙ ИССЛЕДОВАТЕЛЬСКИЙ 
ТЕХНИЧЕСКИЙ УНИВЕРСИТЕТ 

Институт информационных технологий и анализа данных 

IШII MCIIODШ IIIC 1111ституrа 

Допускаю к защите 

Руководитель 

!'::~ ,,-----, 
---'~~п'--одп-ис_ъ __  _ 

И. А.  Серышева 

И.О .  Фамилия 

Основные проектные решения по разработке платформы для 
нетворкинга начинающих IT специалистов для повышения 
уровня компетенций в командной разработке 

наим еновани е те мы 

ПОЯСНИТЕЛЬНАЯ ЗАПИСКА 

к курсовому проекту по ди сциплине 

Проектирование информационных систем 

1.008.00.00 пз 

обозна•1ен11е документа 

Выполнил студент 

ИСТб-19-2 

Шllфр ГJ1)'ППЫ 

Ю . В .  Комогорцева 
И .О.  Фам11m1я 

Нормоконтроль 

OДIIIICb 

И.А.  Серышева 
И.О.  Фамиm1я 

Курсовой проект защищен с оценкой 

Иркутск 2022 г. 

Министерство науки и высшего образования Российской Федерации 
Федеральное государственное бюджетное образовательное у-чрежденке 
высшего образования 

ИРКУТСКИЙ НАЦИОНАЛЬНЫЙ ИССЛЕДОВАТЕЛЬСКИЙ 
ТЕХНИЧЕСКИЙ УНИВЕРСИТЕТ 

ЗАДАНИЕ 

НА КУРСОВОЕ ПРОЕКТИРОВАНИЕ 

По курсу 

Проектирование информационных систем 

Студенту 

Комогорцевой Ю.В. 

(фамилия,  ишщиалы) 

Тема проекта  Основные проектные решения по разработке платформы 
для  нетворкинга  начинающих  IT  специалистов  для 

повышения уровня компетенций в командной разработке 

Исходные 

Разработать систему,  которая предоставляет информацию 

данные 

о  проектах  и  хакатонах,  позволяет  объединятся 

участникам в команды. 

Рекомендуемая литература 

1)  Проектирование АСОИУ :  [  Электронный ресурс]  :  методические 
указания по выполнению курсового проекта: 09.03 .01  «Информатика 

и  вычислительная  техника»  для  бакалавров  по  специальности 

системы 

«Автоматизированные 
и 
управления» /  Иркут. нац. исслед. техн. ун-т ;  сост. Р.  Д.  Гутгарц. -
URL: 
2018. 

Иркутск 
http://elib.istu.edu/viewer/view. php?file=/filesЗ/eг-1 7727 .pdf. 

информации 

ИРНИТУ, 

обработки 

13 

с. 

Графическая часть на  ______ __  листах. 

Дата выдачи задания  «  26 

» 

сентября 
------=----

2022 г. 

Задание получил 

Ю.В .  Комогорцева 
И.О. Фамилия 

Дата представления проекта руководителю  «  23  »  декабря  2022 г. 

Руководитель курсового проектирования 

ь.~  И.А.  Серышева 

~ И.О. Фамилия 

2 

Содержание 

Введение ............................................................................................................... 4 
1 Предпроектное обследование ........................................................................... 5 
1.1 Описание процесса повышения навыков в IT........................................... 5 
1.2 Идея решения .............................................................................................. 8 
1.3 Обзор аналогов ........................................................................................... 9 
2 Постановка задачи и формирование требований к системе ......................... 12 
2.1 Постановка задачи .................................................................................... 12 
2.2 Требования к системе в целом ................................................................. 12 
2.2 Требования к функциям, выполняемым системой ................................. 13 
2.3 Требования к ролям и правам доступа .................................................... 15 
2.4 Требования к информационному обеспечению ...................................... 18 

2.4.1  Требования  к  составу,  структуре  и  способам  организации  данных  в 
системе ........................................................................................................ 18 
2.4.2  Требования  к  информационной  совместимости  со  смежными 
системами ................................................................................................... 18 
2.4.3 Требования по применению СУБД ................................................... 19 
2.4.4 Требования к структуре процесса сбора, обработки, передачи данных 
в системе и представлению данных .......................................................... 19 
2.4.5  Требования  к  защите  данных  от  разрушений  при  авариях  и  сбоях  в 
электропитании системы ........................................................................... 19 
2.5 Требования к верстке ............................................................................... 19 
2.6 Требования к структуре сайта ................................................................. 20 
2.7 Требования к техническому обеспечению .............................................. 21 
2.8 Требования к составу и содержанию работ создания системы ............. 22 
4 Проектирование системы ................................................................................ 24 
4.1 Обоснование выбора инструментария .................................................... 24 
4.2 Моделирование бизнес-процессов (TO-BE) ........................................... 25 
4.3 Проектирование вариантов использования ............................................ 30 
4.3.1 Вариант использования «Создание проекта»................................... 30 
4.3.2 Вариант использования «Участие в проекте» .................................. 32 
4.3.3 Вариант использования «Участие в хакатоне» ................................ 37 
4.3.4 Вариант использования «Проведение мероприятия» ...................... 38 
4.4 Проектирование архитектуры системы ................................................... 39 
4.5 Проектирование базы данных .................................................................. 44 
4.6 Проектирование пользовательского интерфейса.................................... 48 
5 Реализация приложения .................................................................................. 52 
5.1 Описание возможностей текущей версии ............................................... 52 
5.2 Демонстрация варианта использования «Создание проекта» ............... 53 
6 Экономическая часть ...................................................................................... 59 
Заключение ......................................................................................................... 64 
Список использованных источников ................................................................ 65 
Приложение А .................................................................................................... 66 

3 

 
 
 
Введение 

Сфера  информационных  технологий  и  ее  рынок  профессий  показывает 
положительные тенденции роста уже несколько лет. Исходя из этого, возникает 
большое  количество  людей,  желающих  развиваться  в  этой  сфере.  Вместе  с 
этим, растет конкуренция. Теперь для построения карьеры недостаточно иметь 
только  профессиональные  навыки  (hard  skills).  Сейчас  важно  иметь  так 
называемые  «мягкие»  навыки  —  soft  skills.  Например,  уметь  общаться  с 
клиентами,  работать  в  команде,  проявлять  инициативу  или  руководить 
процессом.  При  таких  требованиях  каждый  новичок  в  IT-  индустрии  должен 
стремиться  к  совершенствованию  своих  soft  skills  и  получению  первичного 
опыта разработки. Существует множество инструментов в данном деле. Самым 
простым является участие в каких-либо мероприятиях (хакатоны, конференции, 
семинары,  мастер-классы)  или  создание  пет-проектов  с  сообщниками. 
Предложенные  варианты  являются  универсальными,  потому  что  помимо 
повышения  профессиональных  компетенций  они  помогают  развивать 
личностные качества, благодаря работе в команде. 

После  появления  интереса  и  инициативы  к  возможностям  саморазвития 

появляется ряд вопросов: 

Где искать информацию о мероприятиях? 
Как найти команду? 
На  первый  вопрос  можно  найти  ответ  в  интернете,  а  вот  второй  вопрос 

можно решить, имея высокий уровень социальных навыков.  

Исходя  из  вышеописанной  ситуации,  можно  сформировать  проблему: 
отсутствует  система,  которая  консолидирует  информацию  о  возможных 
источниках опыта, позволяет объединяться в команды и приобретать полезные 
связи.  Отсутствие  системы  и  потребность  людей  приводят  к  необходимости 
разработки.  Поэтому  необходимо  создать  систему,  целью  которой  будет: 
сопровождение  процесса  повышения  уровня  компетенций  в  командной 
разработке посредством нетворкинга. 

После определения цели будущей системы, необходимо упомянуть о том, 
что разработка программного продукта будет происходить в рамках курсового 
проекта  по  дисциплине  «Проектирование  информационных 
систем». 
Необходимо  выполнить  этапы  анализа  предметной  области,  формирования 
требований, проектирования и реализации. 

Предполагается,  что  курсовой  проект  является  фундаментом  выпускной 
квалификационной  работы.  А  также  планируется  поддержание  и  развитие 
системы в будущем. 

Планируемый  результат  заключается  в  рабочей  общедоступной  системе, 
которая  сможет  увеличить  информированность  начинающих  IT-  специалистов 
о  возможностях  получения  первичного  опыта  и  предоставит  возможность 
объединяться в команды для выполнения IT-проектов. 

4 

 
 
 
1 Предпроектное обследование 
1.1 Описание процесса повышения навыков в IT 
В  IT-сфере  для  построения  карьеры  необходимо  иметь  не  только 
профессиональные  навыки  (hard  skills),  но  и  личностные  качества  (soft  skills). 
Развитие  этих  компетенций  тесно  связано  с  работой  в  команде  и  командной 
разработкой.  Повысить свои личностные качества можно занимаясь проектной 
деятельностью  или  участвуя  в  хакатонах  и  иных  мероприятиях.  Рассмотрим 
более подробно способы получения опыта командной разработки. 

Часто  разработчики  помимо  основной  работы  занимаются  разработкой 
личных  проектов.  Такие  проекты  называются  пет-проектами.  Благодаря  пет-
проекту  разработчик  отдыхает  от  рутинных  задач,  прокачивает  навыки  и 
осваивает  новые  инструменты.  Из-за  возможности  получения  выгоды  многие 
компании сами поощряют пет-проекты сотрудников. Например, Gmail и Google 
News  появились  благодаря  стимулированию  Google  работников  уделять  часть 
рабочего времени личным проектам. Идеи проектов можно найти на различных 
сайтах в интернете. 

Преимущества разработки пет-проектов: 
 пет-проекты приносят удовольствие и позволяют развиваться; 
 личные проекты помогают найти лучшую работу; 
 компаниям выгодно стимулировать эксперименты сотрудников. 
Недостатки пет-проектов: 
 нехватка времени на выполнение; 
 отношения  с  друзьями  и  семьей  ухудшаются  из-за  смещения 

приоритетов; 

 негативные эмоции в случае неудачи проекта. 
Участие  в  мероприятиях  –  необходимая  деятельность  в  процессе 
профессионального  развития  и  роста  специалиста.  IT-конференции,  слеты, 
митапы,  хакатоны  и  фестивали  –  это  неотъемлемая  часть  комьюнити  в  IT-
сфере.  Польза  посещения  мероприятий  в  первую  очередь  заключается  в 
нетворкинге,  смене  обстановки,  актуализации  знаний  и  обмене  опытом. 
Мероприятия проходят по различным направлениям развития информационных 
технологий. 

Одним из видов мероприятий являются хакатоны. Хакатон – это событие, 
на  котором  программисты,  дизайнеры  и  менеджеры  сообща  решают  какую-то 
проблему  за  ограниченное  время,  соревнуясь  между  собой.  Слово  «хакатон» 
образовалось от hacker («хакер») и marathon («марафон»). 

Обычно  цель  хакатона  –  создать  полноценную  версию  ПО  или 
минимально  жизнеспособный  продукт  по  инициативе  какой-то  компании. 
Каждый  хакатон  сфокусирован  на  конкретной  области  знаний  –  языке 
программирования,  операционной  системе,  специфических  типах  приложений 
или  программном  интерфейсе.  Хакатоны  устраивают  не  только  для 
программистов,  но  и  для  дизайнеров  и  менеджеров.  Призы  тоже  бывают 
разные: крупная сумма,  грант на развитие проекта, оффер в компанию, льготы 
при  поступлении  в  вуз  или  просто  удовлетворение  (благотворительные 
хакатоны). 

5 

 
В  соревнованиях  практически  всегда  участвуют  группы  из  2-5  человек: 
разработчики,  UI/UX-дизайнеры,  аналитики,  продуктологи,  маркетологи. 
Иногда  это  сформированные  команды,  которые  перемещаются  из  хакатона  в 
хакатон. Иногда встречаются команды, которые выстраиваются вокруг лидера: 
он  привлекает  разных  специалистов  в  зависимости  от  мероприятия.  В 
некоторых случаях группы формируют организаторы перед соревнованием. 

Обычно  участники  проходят  предварительный  отбор:  организаторы 
оценивают  качество  заполнения  заявки,  актуальность  предложенной  идеи  и 
другие параметры, а финалистов приглашают на само мероприятие [1]. 

В  среднем  хакатоны  длятся  2–3  дня,  но  срок  может  варьироваться  от 
нескольких  часов  до  недели.  Для  отслеживания  прогресса  есть  чекпоинты:  в 
определенное  время,  несколько  раз  за  хакатон,  участники  показывают 
результаты  работы  и  получают  отзывы  от  менторов.  Командам  это  позволяет 
понять,  в  правильном  ли  направлении  они  двигаются,  а  компании-заказчику  – 
убедиться, что участники работают над MVP и не используют готовые решения 
с открытым кодом. 

Кроме  консультаций  и  советов  от  менторов,  участники  получают  навыки 
работы  в  команде,  подготовки  и  защиты  презентации,  тайм-менеджмента, 
работы в стрессовой ситуации. 

В  результате  все  активности  необходимо  искать.  Есть  различные 
способы,  которые  будут  рассмотрены  ниже.  После  рассмотрения  объектов 
предметной области необходимо проанализировать процессы. 

Процессы,  которые  выполняются  в  данный  момент  для  повышения 
компетенций  с  помощью  описанных  выше  методов,  выглядят  следующим 
образом:  

Поиск пет-проекта: 
1. Необходимо найти статьи с рекомендациями о пет-проектах для своей 

области IT и ознакомиться с ними; 

2. Прочитать форумы или обсуждения в социальных сетях; 
3. Подобрать идею для пет-проекта исследуя потребности знакомых; 
4. Выбрать из готовых предложенных или генерировать самому идею. 

6 

 
 
Рисунок 1.1 – Алгоритм поиска пет-проекта 

Поиск хакатона: 
1. Найти  ресурсы  с  хакатонами  (иногда  это  группы  в  социальных  сетях 

или чаты компаний, занимающихся организацией хакатонов); 

2. Найти хакатон с помощью нетворкинга; 
3. Отслеживать подходящий по навыкам и интересам хакатон. 

Рисунок 1.2 – Алгоритм поиска хакатона 

7 

 
 
 
 
 
 
Поиск команды для проекта или хакатона: 
1. Поиск через платформу, на которой проводится хакатон; 
2. Поиск через социальные сети (объявления, чаты); 
3. Поиск с помощью нетворкинга (знакомые, мероприятия, конференции). 

Рисунок 1.3 – Алгоритм поиска команды для проекта или хакатона 

К  сожалению,  каждый  из  процессов  занимает  немало  времени, 
выполняется много ненужных действий. В основе всего лежат статьи, соц. сети 
и  сайты  с  хакатонами.  Источники  информации  для  каждого  процесса  разные, 
что является существенным недостатком. 

Часто,  несмотря  на  желание  человека  получить  опыт,  дальше 
ознакомления  информации  он  не  заходит.  Чтобы  решить  эту  проблему, 
необходимо учитывать систему мотивации.  

На  основании  проведенного  анализа  выявлена  проблема:  отсутствует 
система,  которая  консолидирует  информацию  о  возможных  источниках 
опыта, позволяет объединяться в команды и приобретать полезные связи. 

1.2 Идея решения 
Исходя  из  выявленной  проблемы  и  поставленной  цели,  предлагается 
решение:  автоматизировать  процесс  поиска  активностей  для  повышения 
компетенций  в  командной  разработке.  Активностями  в  системе  должны 
являться проекты, хакатоны и мероприятия.  

Проекты  должны  создаваться  пользователями  и  проходить  процесс 
модерации администратором. Пользователи могут вступить в команду проекта 
или  создать  свою.  Проекты  могут  быть  уникальными  (аналог  стартапов)  или 
учебными  (может  быть  много  команд).  Нужна  возможность  фиксации 
результатов участия в проекте.  

8 

 
 
 
 
Так  как  запись  на  участие  в  хакатоне  в  основном  ведется  на  сторонних 
ресурсах,  то  на  первоначальном  этапе  достаточно  лишь  предоставлять 
информацию  о  них.  Автоматизировать  этот  процесс  можно  с  помощью 
агрегирования хакатонов с других сайтов. 

Мотивацию  необходимо  предусмотреть  с  помощью  конкурсов  и 
челленджей  на  платформе,  а  также  системы  достижений,  правила  выдачи 
которых  необходимо  определить  на  этапе  проектирования.  Так  же,  для 
увеличения 
знаний  и  компетенций  можно  предусмотреть  проведение 
различных мероприятий с помощью системы. 

Для  реализации  идеи  необходимо  создать  личный  кабинет,  так  как 
необходимо  хранить  информацию  об  участниках.  Так  же,  необходимо  роль 
администратора и панель управления системой. 

1.3 Обзор аналогов 
Исходя  из  поставленной  цели,  выявленной  проблемы  и  предложенного 
решения,  необходимо  обязательно  выполнить  обзор  аналогов.  Это  поможет 
выявить  не  только  наличие  аналогов,  но  и  интересные  особенности  или 
недостатки,  которые  можно  учесть  при  создании  системы.  Для  проведения 
анализа была собрана информация о 17 сервисах. Их сравнение невозможно без 
критериев.  Важно  узнать  имеет  ли  система  возможности  подбора  проектов, 
мероприятий(хакатонов)  и  команд/участников.  Актуальность  контента  так  же 
сравнении.  Дополнительными 
является  необходимым  критерием  при 
критериями  с  точки  зрения  обычного  пользователя  можно  считать  язык 
системы, дизайн и простоту использования. 

В итоге, все критерии должны иметь возможные значения и их описание. 
Предлагается,  значения  ставить  в  цифрах,  чтобы  после  анализа  можно  было 
определить  по  сумме  значений  схожесть  разрабатываемой  системы  с 
найденными аналогами. 

Таблица 1.1 – Значение критериев 

№ 

Критерий 

Значения 

1  Источник агрегатора 

2 

Подбор проектов 

3 

Подбор команды или 
участников для 
проекта 

Да 

Нет 

1 

0 

1 

актуальный 

Описание 
Может  являться  источником  для 
агрегатора, 
и 
подходящий контент 
Не может являться источником для 
агрегатора, контент не подходит 
Наличие  проектов:  в  виде  идей, 
проектов  для  выполнения  или  в 
виде готовых решений 
Отсутствуют  проекты  или  любая 
связанная с ними концепция 
Наличие 
подбора 
функций 
команды,  вступления  в  нее  или 
поиска участника в команду 

9 

 
 
 
Продолжение таблицы 1.1 

№ 

3 

Критерий 
Подбор команды или 
участников для 
проекта 

4 

Подбор мероприятий 
(хакатоны) 

5 

6 

7 

8 

9 

Подбор команды или 
участников для 
мероприятия 

Актуальность и 
полнота контента 

Язык 

Дизайн 

Простота 
использования 

Значения  Описание 

0 

1 

0 

1 

0 

1 

0 

ru 
en 

1 

0 

1 

0 

Работа  в  команде  внутри  проектов 
отсутствует 

информация 

Наличие  функций  для  проведения 
мероприятия,  информация  о  них,  в 
том числе о хакатонах 
Отсутствует 
о 
мероприятиях  и  функции  для  их 
проведения 
Наличие 
подбора 
функций 
команды,  вступления  в  нее  или 
поиска участника в команду 
Работа  в  команде  на  мероприятиях 
отсутствует 
Актуальный  контент,  достаточная 
проработка 
Отсутствует  свежая  информация, 
либо ее очень мало 
Русскоязычная версия 
Англоязычная версия 
дизайн, 
Приятный 
воспринимается легко 
Плохая 
непривлекательность 
Удобный  и  понятный  интерфейс, 
легко ориентироваться в системе 
Трудно 
неструктурированная система 

ориентироваться, 

читабельность 

контент 

и 

Проведенный  анализ  по  критериям  из  таблицы  №  1.1  представлен  в 
приложении А. Из 17 сервисов были подобраны для агрегатора 7 источников, а 
также  выявлены  ближайшие  аналоги.  По  сумме  значений  критериев  ближе 
всего являются системы: Leader-ID, Codenrock, ФИЗТЕХ ДЖЕНЕЗИС, Devpost, 
Хакатоны.рус и Kaggle. Однако все эти сервисы не являются полным аналогом 
по запланированной системе. 

Так  же  были  выявлены  интересные  особенности,  которые  можно 

учитывать при создании системы: 

 рулетка  проектов  –  представление  подбора  проектов  с  элементами 

геймификации; 

 проведение  челленджей  –  мероприятие,  где  необходимо  выполнить 

задание-вызов, чтобы оказаться на доске лидеров. 

10 

 
 
Подводя  итог,  выполненного  анализа,  стоит  упомянуть  о  важности 
проведенной  работы:  дополнительное  изучение  предметной  области,  сбор 
источников  хакатонов  для  агрегации,  выявление  особенностей  в  других 
системах. 

11 

 
 
 
рамках 

написания 

технического 

2 Постановка задачи и формирование требований к системе 
В  данном  разделе  описаны  различные  требования  к  системе,  которые 
основаны на цели будущей системы, проведенном анализе предметной области 
и  выявленных  особенностей  аналогичных  систем.  Требования  к  системе  были 
по 
в 
разработаны 
межгосударственному стандарту [2]. 
2.1 Постановка задачи 
Система предназначена для увеличения информированности начинающих 
IT  специалистов  о  возможностях  получения  первичного  опыта.  Основным 
назначением  системы  является  предоставление  информации  о  проектах, 
мероприятиях  и  хакатонах,  а  также  объединение  людей  в  команды.  Система 
должна  предоставлять  возможность  вступать  в  команды  для  получения  опыта 
разработки.  Так  же  система  должна  обеспечивать  возможность  хранения 
взаимодействия  между 
информации 
пользователями.  Система  должна  мотивировать  пользователей  на  участие  с 
помощью соревнований и системы достижений. 

пользователе 

лучшего 

задания 

для 

о 

В  рамках  проекта  автоматизируется  деятельность  в  следующих  бизнес-

процессах: 

 поиск проекта для получения навыков работы в команде; 
 поиск 

получения 

навыков 

для 

разработки 

через 

хакатона 
«соревновательный дух»; 

 поиск команды для совместной работы; 
 проведение  мероприятий  направленных  на  повышение  компетенций 

командной деятельности. 

Система  создается  с  целью  сопровождения  процесса  повышения 

уровня компетенций в командной разработке посредством нетворкинга. 

В  результате  создания  системы  должны  быть  улучшены  значения 

следующих показателей: 

 время, затрачиваемое на приобретение полезных связей в IT-сфере; 
 время поиска команды/участников в команду; 
 время поиска проектов; 
 время поиска хакатонов; 
 время поиска мероприятий; 
 время осваивания специалистов в новом коллективе; 
 время принятия решения при принятии на работу; 
 время поиска работы. 
2.2 Требования к системе в целом 
В  Системе  предлагается  выделить 

следующие  функциональные 

подсистемы: 

 подсистема хакатонов, которая предназначена для реализации процесса 
поиска/подбора  хакатона,  а  также  поиска  команды  или  участника  (подсистема 
будет  собирать  информацию  с  помощью  агрегации  с  других  сайтов 
информации о хакатонах); 

12 

 
 подсистема  проектов,  которая  должна  предоставлять  возможность 
подбора  идей  пет-проектов  и  сообщников  для  реализации  пет-проектов 
(подразумевает  хранение  информации  о  результате  участия  в  проекте  каждого 
участника); 

 подсистема мероприятий, которая включает в себя создание конкурсов, 
проведение  мероприятий  и  отслеживание  успехов  пользователей  для 
мотивации получения опыта; 

личного 

 подсистема 

для 
кабинета, 
формирования  информации  о  пользователе,  его  опыте  и  достижениях,  для 
подбора  пет-проектов  и  хакатонов  (включает  в  себя  так  же  механику 
достижений, а именно назначение достижений); 

предназначена 

которая 

 подсистема 

администрирования, 

управлять 
проектами,  агрегатором  и  контента  проекта  в  целом  (должна  быть  доступна 
только  для  администратора,  и  нужна  для  модерации  поданных  заявок,  учета 
статистики платформы). 

помогает 

которая 

Система должна быть веб-приложением, что позволит обеспечить доступ 
с различных устройств из любой точки мира. Система должна состоять из трех 
приложений  в  виде  сервера,  агрегатора  и  клиента.  Клиент  должен  содержать 
программу-клиент,  которая  предоставляет  для  пользователя  интерфейс, 
посылает  запросы  на  сервер  и  получает  ответы  на  запросы.  В  то  же  время, 
сервер  должен  хранить  данные  и  содержит  программу,  которая  отвечает  за 
логику  обработки  данных  из  поступивших  запросов.  Агрегатор  должен 
взаимодействовать с сайтами-источниками и запускаться сервером.  

Источниками  данных  для  подсистемы  агрегатора  хакатонов  должны 

быть: 

 https://leader-id.ru/ ; 
 https://hackathons.pro/ ; 
 https://www.хакатоны.рф/ ; 
 https://codenrock.com/ ; 
 https://pgenesis.ru/events ; 
 https://devpost.com/ ; 
 https://хакатоны.рус/. 
Данный  перечень  может  редактироваться  и  пополняться  после 
реализации 
управления 
администрирования, 
агрегатором.  В  данном  разделе  подсистемы  необходимо  предоставлять 
возможность пользователю просматривать список источников, редактировать и 
добавлять новые источники. 

подсистемы 

именно, 

а 

2.2 Требования к функциям, выполняемым системой 
Система  должна  включать  5  подсистем,  определенных  в  предыдущем 
пункте.  В  данном  подразделе  описана  детализация  подсистем  с  описанием 
функциональности. 

Форма  представления  выходной  информации  для  всех  функций 

определена структурой сайта. 

13 

 
Подсистема  «Проекты»  должна  автоматизировать  процесс  поиска 
команды  или  идеи  для  пет-проекта.  Функции,  которые  должны  быть 
обязательно реализованы в первой версии: 

 просмотр  списка  проектов  с  помощью  фильтрации  по  тегам,  по  типу 

проектов; 

 поиск проектов с помощью поисковой строки; 
 просмотр информации о проекте: название; описание; изображения; тип 
его 
список 

(уникальный/учебный); 

которые 

команд, 

проекта 
выполняют/выполнили; 

 отправление заявки на создание проекта администратору; 
 отправление  заявки  на  вступление  в  команду  для  выполнения 

конкретного проекта; 

 рассмотрение заявки на вступление в команду создателем команды или 
любым  из  участников  (при  создании  команды  необходимо  выбрать  роль 
участника, который будет рассматривать заявки); 

 фиксация  результатов  деятельности  команды  по  проекту  в  виде 
прикрепления  ссылки  на  готовое  решение  и  написания  отзыва  о  проделанной 
работе. 

Функции, которые необходимо реализовать в следующих версиях: 
 оценка  результата  деятельности  команды  другими  участниками  с 

помощью выставления оценки «нравится/не нравится»; 

 рулетка проектов – альтернативный инструмент подбора проектов. 
Подсистема  «Хакатоны»  должна  автоматизировать  процесс  поиска 
хакатона  и  команды  или  участников  в  команду.  Функции,  которые  должны 
быть обязательно реализованы в первой версии: 

 просмотр списка хакатонов с помощью фильтрации по тегам, по датам 

начала регистрации, по размеру команды; 

 просмотр информации о хакатоне: описание, даты, описание приза; 
 переход на другой ресурс для записи на хакатон; 
 агрегация  хакатонов  со  сторонних  ресурсов  с  помощью  библиотек 

Python для парсинга веб-сайтов. 

Подсистема  «Мероприятия»  должна  мотивировать  участников  на 
выполнение  каких-либо  требований  с  целью  получения  приза.  Мероприятия 
создаются  администратором  или  могут  быть  предложены  участниками. 
Функции, которые должны быть обязательно реализованы в первой версии: 

 просмотр списка мероприятий; 
 участие в мероприятии (функции аналогичны участию в проекте); 
 просмотр  результатов  мероприятия  (отображение  победителей  на 

странице мероприятия). 

Функции, которые необходимо реализовать в следующих версиях: 
 доски со списком лидеров по достижениям; 
 проведение мероприятия - хакатона с помощью системы; 
 оценка  результатов  команд,  экспертами  с  помощью  выставления 

оценок. 

14 

 
Подсистема  «Личный  кабинет»  должна  хранить  информацию  о 
пользователях и с ее помощью пользователь будет получать доступ ко всему с 
ним  связанному.  Функции,  которые  должны  быть  обязательно  реализованы  в 
первой версии: 

 регистрация с помощью email, пароля и логина пользователя; 
 авторизация с помощью email и пароля; 
 восстановление  пароля  с  помощью  отправления  письма  на  почтовый 

адрес; 

 заполнение  профиля  после  регистрации:  информация  о  пользователе, 

контактная информация; 

 просмотр  личного  кабинета:  информация  о  профиле,  список 

достижений пользователя; 

 просмотр команд, в которых состоит участник, в личном кабинете; 
 просмотр проектов, которые создавал участник, в личном кабинете; 
 переход к странице проекта из списка проектов личного кабинета; 
 переход к странице команды из списка команд личного кабинета; 
 подписка на рассылку. 
Функции, которые необходимо реализовать в следующих версиях: 
 уведомления пользователя; 
 возможность регистрации через другие ресурсы; 
 интеграция данных о пользователе с другими ресурсами. 
Подсистема  «Административная  панель»  должна  быть  панелью 
управления проектами, агрегатором и контентом Системы. Подсистема должна 
быть  доступна  только  для  администратора.  Функции,  которые  должны  быть 
обязательно реализованы в первой версии: 

 просмотр  списка  поданных  на  рассмотрение  заявок  для  создания 

проектов; 

 рассмотрение заявки на создание проекта в административной панели, в 

результате проект приобретает статус (создан, не создан); 

 создание хакатона вручную; 
 просмотр статистики площадки, а именно посещаемости и активности; 
 создание мероприятия администратором; 
 завершение  мероприятия,  в  том  числе  оценка  результатов  команд 

экспертами и публикация результатов мероприятия на странице мероприятия. 
Функции, которые необходимо реализовать в следующих версиях: 
 управление источниками для агрегатора хакатонов; 
 управление частотой сбора информации агрегатора; 
 рассмотрение заявок на создание мероприятия от участников; 
 архивация проектов из-за низкого интереса. 
2.3 Требования к ролям и правам доступа 
В  таблице  2.1  приведено  разграничение  прав  доступа  между  3 
пользователями:  гость,  участник  и  администратор.  Каждый  пользователь 

15 

 
обладает  правами  предыдущего,  и  расположены  они  по  возрастанию  от 
меньшей группы к большей. 

Таблица 2.1 – Роли и функции 

Роль 

Гость 

Подсистема 
Проекты 

Хакатоны 

Гость 

Хакатоны 

изображения; 

Функция 
Просмотр  списка  проектов  с  помощью 
фильтрации по тегам, по типу проектов 
Поиск проектов с помощью поисковой строки 
Просмотр  информации  о  проекте:  название; 
проекта 
тип 
описание; 
(уникальный/учебный); 
команд, 
список 
которые его выполняют/выполнили 
Рулетка 
инструмент подбора проектов 
Просмотр  списка  хакатонов  с  помощью 
фильтрации  по  тегам,  по  датам  начала 
регистрации, по размеру команды 
Просмотр  информации  о  хакатоне:  описание, 
даты, описание приза 
Переход  на  другой  ресурс  для  записи  на 
хакатон 

альтернативный 

проектов 

– 

Мероприятия  Просмотр списка мероприятий 

Личный 
кабинет 

Участник  Проекты 

Участник  Проекты 

результатов 

регистрации 

через  другие 

мероприятия 
странице 

Просмотр 
(отображение  победителей  на 
мероприятия). 
Доски со списком лидеров по достижениям 
Регистрация  с  помощью  email,  пароля  и 
логина пользователя 
Авторизация с помощью email и пароля 
Возможность 
ресурсы; 
Отправление  заявки  на  создание  проекта 
администратору 
Отправление  заявки  на  вступление  в  команду 
для выполнения конкретного проекта 
Рассмотрение заявки на вступление в команду 
создателем 
из 
участников 
команды 
необходимо выбрать роль участника, который 
будет рассматривать заявки) 
Фиксация  результатов  деятельности  команды 
по  проекту  в  виде  прикрепления  ссылки  на 
готовое  решение  и  написания  отзыва  о 
проделанной работе 

или 
создании 

команды 
(при 

любым 

16 

 
 
Продолжение таблицы 2.1 

Роль 
Участник  Проекты 

Подсистема  Функция 

Оценка  результата  деятельности  команды 
другими 
помощью 
выставления оценки «нравится/не нравится» 

участниками 

с 

Мероприятия  Участие в мероприятии (функции аналогичны 

Личный 
кабинет 

Админист
ратор 

Администрат
ивная панель 

Админист
ратор 

Администра
тивная 
панель 

с 

в 

пароля 

состоит 

команд, 

которые 

которых 

создавал 

проектов, 

помощью 

участию в проекте) 
Оценка  результатов  команд,  экспертами  с 
помощью выставления оценок 
Восстановление 
отправления письма на почтовый адрес; 
Просмотр 
участник, в личном кабинете 
Заполнение  профиля  после  регистрации: 
информация  о  пользователе,  контактная 
информация; 
Просмотр  личного  кабинета:  информация  о 
профиле, список достижений пользователя 
Просмотр 
участник, в личном кабинете 
Переход  к  странице  проекта  из  списка 
проектов личного кабинета 
Переход  к  странице  команды  из  списка 
команд личного кабинета 
Подписка на рассылку 
Уведомления пользователя 
Интеграция данных о пользователе с другими 
ресурсами 
Проведение  мероприятия 
помощью системы 
Просмотр  списка  поданных  на  рассмотрение 
заявок для создания проектов 
Рассмотрение  заявки  на  создание  проекта  в 
административной  панели, 
в  результате 
проект приобретает статус (создан, не создан) 
Создание хакатона вручную 
Просмотр  статистики  площадки,  а  именно 
посещаемости и активности 
Создание мероприятия администратором 
Завершение мероприятия, в том числе оценка 
результатов команд экспертами и  публикация 
странице 
результатов 
мероприятия 

мероприятия 

-  хакатона 

на 

с 

17 

 
 
Продолжение таблицы 2.1 

Роль 
Админист
ратор 

Подсистема  Функция 
Администрат
ивная панель 

Управление  частотой  сбора  информации 
агрегатора 
Рассмотрение 
мероприятия от участников 
Архивация проектов из-за низкого интереса 
Управление  источниками  для  агрегатора 
хакатонов 

создание 

заявок 

на 

2.4 Требования к информационному обеспечению 
2.4.1  Требования  к  составу,  структуре  и  способам  организации 

данных в системе 

В системе должна храниться информация о следующих объектах: проект, 
хакатон,  мероприятие,  пользователь,  команда.  Детализация  информации  об 
объектах показана в таблице 2.2. 

Таблица 2.2 – Структура данных 

Объект 
Проект 

Хакатон 

Данные 
Название,  теги,  тип 
описание 
Название,  теги,  даты  начала  и  окончания,  дата  завершения 
регистрации,  картинки,  описание,  описание  призов,  ссылка 
на ресурс для регистрации 

(учебный/уникальный),  картинки, 

Мероприятие  Название,  теги,  даты  начала  и  окончания,  дата  завершения 
регистрации,  картинки,  описание,  описание  призов,  список 
экспертов,  списки  команд,  оценки  экспертов  для  каждого 
решения 

Пользователь  ФИО, контактные данные (email), список достижений, опыт, 

Команда 

пароль, фотография 
Создатель команды, список ролей в команде, пользователи с 
их  ролью  в  команде,  результат  участия  команды  в 
проекте/хакатоне/мероприятие  (ссылка,  отзыв),  описание 
команды, название команды 

Логическая  и  физическая  модель  данных  должна  быть  определена 
разработчиком на стадии «Проектирование. Разработка технического проекта». 
2.4.2  Требования  к  информационной  совместимости  со  смежными 

системами 

Источники  для  агрегации  информации о  хакатонах  определены  в  пункте 

2.1. 

18 

 
 
 
 
Состав  данных  для  осуществления  информационной  агрегации  по 
каждому  источнику  должен  быть  определен  разработчиком  на  стадии 
«Проектирование. Разработка технического проекта». 
2.4.3 Требования по применению СУБД 
Для  реализации  подсистемы  хранения  данных  должна  использоваться 
система  управления  базами  данных 

свободная  объектно-реляционная 
PostgreSQL - версия 14. 

2.4.4  Требования  к  структуре  процесса  сбора,  обработки,  передачи 

данных в системе и представлению данных 

Система  при  вводе  в  действие  должна  содержать  теги,  которые  команда 
разработчиков  должна  самостоятельно  сформировать,  потому  что  они 
разбираются в данной предметной области. 

Первые несколько учебных проектов необходимо создать в системе перед 
вводом  в  действие.  Предполагается,  что  эти  проекты  заполнит  команда 
разработки. 

Остальные  процессы  сбора,  обработки  и  передачи  данных  в  системе 

определятся на этапе «Проектирование». 

2.4.5  Требования  к  защите  данных  от  разрушений  при  авариях  и 

сбоях в электропитании системы 

Информация  в  базе  данных  системы  должна  сохраняться  при 
возникновении  аварийных  ситуаций,  связанных  со  сбоями  электропитания  на 
стороне арендованного сервера. 

Резервное  копирование  данных  должно  осуществляться  на  регулярной 
основе, в объёмах, достаточных для восстановления информации в подсистеме 
хранения данных. 

2.5 Требования к верстке 
Система  должна  отвечать  требованиям  кроссбраузерности,  а  именно, 

поддерживаться во всех популярных браузерах в последних версиях: 

 Internet  Explorer  версии  10  и  выше,  платформа  —  операционные 

системы семейства Windows; 

 Mozilla  Firefox версии 28 и  выше, платформа  — Windows версии XP и 

выше и Mac OS X версии 10.8 и выше; 

 Safari версии 6.1 и выше, платформа — Mac OS X версии 10.8 и выше; 
 Google Chrome версии 21 и выше, платформа  — Windows версии XP и 

выше и Mac OS X версии 10.8 и выше; 

 Opera  версии  15  и  выше,  платформа  —  Windows  версии  XP  и  выше  и 

Mac OS X версии 10.8 и выше; 

 браузеры мобильных устройств iOS 7 и выше; 
 браузеры мобильных устройств Android 5 и выше. 
При верстке должны учитываться особенности браузеров, их ограничения 
внешнего  вида  и  поведения  объектов.  Для  обеспечения  правильного 
отображения  элементов  в  разных  браузерах  может  применяться  грациозная 
деградация. 

19 

 
Система должна разрабатываться в соответствии с современным методом 
верстки  БЭМ  –  «блок  –  элемент  –  модификатор».  Необходимо  соблюдать 
единые правила верстки, которые помогают быстро разрабатывать интерфейсы, 
гибко их настраивать и легко модифицировать. 

Верстка  в  системе  должна  быть  адаптивной,  а  именно  корректно 
отображаться на любом устройстве со следующими расширениями: 2560x1440; 
3840x2160;  1024x600;  1024x768;  1152x864;  1280x800;  1280x1024;  1440x900; 
1920x1080; 1680x1050. 

Остальные требования: 
 при  размерах  более  375px  не  должно  возникать  горизонтальной 
прокрутки страницы (за исключением отдельных блоков верстки, где подобная 
реализация предусмотрена дизайн-макетами); 

 все  изображения  должны  сопровождаться  описанием  при  проблемах 

загрузки; 

 логотип на внутренних страницах должен вести на главную; 
 у каждой страницы должен быть свое уникальное поле title; 
 изображения должны масштабироваться в зависимости от размера окна; 
 картинки  должны  быть  максимально  сжаты,  должны  использоваться 

современные форматы изображений; 

 весь важный функционал сайта должен быть доступен без js-скриптов; 
 анимация не должна быть сложной. 
2.6 Требования к структуре сайта 
Структура  сайта  (рис.  2.1)  и  основные  компоненты  определены  в 

визуальном конструкторе и планировщике веб-сайтов – Octopus.do [3]. 

Действия  обычного  пользователя  начинаются  с  главной  страницы,  где 
содержатся  краткие  сведения  о  проекте.  Далее  с  помощью  навигационного 
меню пользователь может перейти на страницу одной из подсистем (хакатоны, 
проекты, конкурсы) или зарегистрироваться/авторизоваться. 

Действия  администратора  проекта  начинаются  с  главной  страницы  со 
статистикой,  и  с  помощью  навигационного  меню  администратор  может 
перейти на страницы с управлением проектами, хакатонами, конкурсами. 

20 

 
 
Рисунок 2.1 – Структура сайта 

2.7 Требования к техническому обеспечению 
Основные требования к хостингу: 
 система должна быть расположена на виртуальном сервере VPS; 
 объём дискового пространства – от 1GB; 
 сервер должен быть с операционной системой Ubuntu; 
 сервер должен быть с защитой от DDoS и блокиратором спама, а также 
с  системой  резервного  копирования  данных  для  восстановления  в  случае 
непредвиденных ситуаций и ошибок при обновлении. 

21 

 
 
 
2.8 Требования к составу и содержанию работ создания системы 
Система  должна  быть  реализована  за  7,5  месяцев,  в  этот  период 
необходимо выполнить анализ, проектирование, реализацию и ввод в действие. 
Некоторые процессы необходимо выполнять параллельно. 

и 

обработана 

Стадия 
предметной 
Анализ 
области,  формирование 
требований 
и 
разработка 
технического задания. 

Таблица 2.3 – Стадии работ по созданию системы 
Результат 
Собрана 
информация о: 
 предметной  области  получения 
IT 
первичного 
специалистов; 
 целевой 
потребностях; 
 сущности пет-проекты; 
 сущности хакатоны. 

аудитории 

опыта 

ее 

и 

Проектирование. 
Создание  технического 
проекта. 

Реализация. 

Ввод в действие. 

Сопровождение. 

и 

задание 

Определены источники данных. 
Техническое 
приложения к нему 
Архитектура 
системы,  модели 
данных,  сценарии  использования 
спроектированные 
системы, 
интерфейсы пользователя 
Разработка 
документирование 
Работающий в интернете сайт 

системы 

ее 

и 

Система  работает  стабильно,  без 
сбоев.  Выявленные  недостатки 
устранены, постоянная модерация 
администратором. 

Сроки 
01.10.2022  – 
14.12.2022 

15.12.2022  – 
12.01.2023 

12.01.2023  – 
22.05.2023 
27.04.2023-
22.05.2023 
27.04.2023 

Для  создания  системы  необходимо  придерживаться  итеративной  модели 
разработки.  Стадия  проектирования  и  реализации,  обязательно  должны 
выполняться  в  каждой  итерации  для  определённой  цели.  В  разделе  2.2 
определены  функции,  которые  необходимо  реализовать  в  каждой  подсистеме. 
Список  функций  разделен  на  первую  и  последующие  версии.  В  таблице  2.4 
показаны  сроки  двух  итераций  проектирования  и  реализации  системы. 
Разбиение  на  итерации  необходимо  для  более  раннего  ввода  в  действие 
системы  с  минимальным  функционалом.  На  второй  реализации  необходимо 
реализовать оставшиеся функции. 

22 

 
 
 
 
 
Таблица 2.4 – Итерации проектирования и реализации 

Итерация 
проектирования 
и реализации 
1 

2 

Цель 

Длительность  Даты 

Реализация 
первой версии 
Реализация 
функций 

функций 

2,5 месяца 

остальных 

1,5 месяца 

12.01.2023 
12.04.2023 
12.04.2023 
27.04.2023 

- 

- 

23 

 
 
 
4 Проектирование системы 
4.1 Обоснование выбора инструментария 
В  данном  разделе  приводится  описание  и  аргументация  выбора 
программных  инструментов,  используемых  при  проектировании  и 
реализации системы. 

для 

рабочих 

создания 

диаграмм 

сетевых.  Обладает 

Моделирование  бизнес-процессов  необходимо 

Для построения логической модели хранилища данных и вариантов 
использования  был  выбран  сервис  Draw.io.  Это  бесплатное  онлайн-
процессов, 
приложение 
организационных, 
современным  и  понятным 
интерфейсом, а также позволяет сохранить проект в форматах JPG, PNG и 
другие. Именно за эти особенности и был выбран данный инструмент. 
выполнить 

с 
использованием  нотации  IDEF0.  Она  предназначена  для  описания 
процессов  с  помощью  определения  логической  последовательности  и 
задач.  Моделирование  необходимо  производить  по 
композиции 
методологии  функционального  моделирования 
[4],  определенной 
Госстандартом России. Для построения модели необходимо использовать 
бесплатную  образовательную  версию  коммерческого  программного 
обеспечения Ramus – Ramus Educational [5]. Он позволяет пользователям 
создавать  диаграммы  в  форматах  IDEF0  и  DFD,  а  также  поддерживает 
экспорт файлов в формате изображений. 

Архитектура  системы  спроектирована  с  помощью  модели  C4  [6]. 
Эта модель была выбрана, потому что визуально показывает архитектуру 
на разных уровнях в понятном виде даже для простого пользователя. 

Для  разработки  макетов  пользовательского  интерфейса  выбран 
онлайн-сервис Figma, который предназначен для разработки интерфейсов 
и  прототипирования  с  возможностью  организации  совместной  работы  в 
режиме  реального  времени.  Данный  онлайн-сервис  был  выбран,  исходя 
из  следующих  преимуществ:  наличие  опыта  использования,  бесплатный 
тарифный  план  для  одного  пользователя,  кроссплатформенность, 
сохранение истории изменений макетов. 

Для  программирования  был  выбран  язык  программирования 
TypeScript  в  связи  с  наличием  опыта  разработки,  наличием  типизации  и 
удобной  системы  выявления  ошибок.  Для  выполнения  кода  необходима 
среда разработки, а именно Node.js. 

Исходя  из  выбранного  языка  для  разработки  веб-приложения  был 
выбран фреймворк Vue.js из-за открытого исходного кода, легкого порога 
вхождения,  высокой  производительности,  наличия  документации, 
популярности, а также из-за использования компонентов и реактивности. 
Для  разработки  на  нем  необходимо  пользоваться  документацией  и 
руководством с официального сайта фреймворка [7]. 

Для  создания  серверной  части  так  же  необходимо  использовать 
фреймворк на основе TypeScript. Среди большого множества был выбран 
за  открытый  исходный  код,  возможность  создания 
NestJS 

[8] 

24 

 
масштабируемого 
проектирования и адаптируемую экосистему. 

приложения, 

модульную 

архитектуру,  шаблоны 

Для  разработки  потребуется  текстовый  редактор  для  написания  кода.  В 
качестве  текстового  редактора  будет  использована  такая  программа  как  Visual 
Studio  Code.  Она  бесплатна,  имеет  множество  возможностей  и  может  быть 
установлена как на Windows, так и на Linux и MacOS. 

Программа  Postman  будет  использована  для  тестирования  работы  API,  а 
также для отправки запросов POST и GET. Она имеет графический интерфейс, 
поэтому легко осваивается даже новичками. 

Так же в клиентской части системы будет использован  Bootstrap [9]. Это 
свободный  набор  инструментов  для  создания  сайтов  и  веб-приложений. 
Включает  в  себя  HTML-  и  CSS-шаблоны  оформления  для  типографики,  веб-
форм, кнопок, меток, блоков навигации и прочих компонентов веб-интерфейса, 
включая JavaScript-расширения. 

Для  работы  с  базой  данных  необходимо  выбрать  систему  управления 
базами  данных.  СУБД  –  это  совокупность  программных  и  лингвистических 
средств  общего  или  специального  назначения,  обеспечивающих  управление 
созданием  и  использованием  баз  данных.  Среди  множества  СУБД  была 
выбрана объектно-реляционная система управления базами данных PostgreSQL. 
Использование  PostgreSQL  бесплатно,  она  является  одной  из  наиболее 
популярных. По этим причинам и был сделан выбор. 

4.2 Моделирование бизнес-процессов (TO-BE) 
В  данном  разделе  будет  выполнено  моделирование  бизнес-процессов  с 
помощью  графической  нотации  IDEF0  для  формализации  и  описания  логики 
разрабатываемой системы. 

На  рисунке  4.1  представлена  модель  «Система  повышения  уровня 
компетенций  в  командной  разработке»  уровня  А0,  где  на  вход  поступает 
интерес/инициатива,  информация  о  пользователе  и  информация  о  проектах, 
хакатонах,  мероприятиях.  Интерес  и  инициатива  пользователя  являются 
главным  входным  элементом,  потому  что  без  него  пользователь  не  будет 
выполнять  действия  в  системе.  Информация  о  пользователе  включает  в  себя 
контактные  данные,  пароль,  логин,  ФИО,  дату  рождения  и  т.  д.  Вся  система 
должна работать благодаря двум ресурсам: пользователь и сайты с хакатонами. 
За  счет  управления  правилами  системы  и  пользовательским  соглашением 
получается  результат:  информация  об  источниках  получения  опыта, 
достижения и опыт. 

25 

 
 
Рисунок 4.1 – Концептуальный уровень модели «Система повышения уровня 
компетенций в командной разработке» 

На рисунке 4.2 изображена детализация концептуального уровня модели. 
Детализация содержит 4 процесса: авторизация, формирование контента, поиск 
активности  и  участие  в  ней.  Во  всех  процессах  участвует  пользователь.  Для 
формирования  контента  необходимы  сайты  с  хакатонами.  Всеми  процессами 
управляют правила системы, а процессом авторизации еще и пользовательское 
соглашение. 

Процесс  авторизации  необходим  для  разграничения  в  системе  гостя, 
участника и администратора. Далее, все три роли распределяются по процессам 
и являются входными элементами для них. Тем самым исходя из модели видно 
права доступа пользователей в каждом процессе. 

Процесс формирование контента отвечает за преобразование информации 

о проектах, мероприятиях и хакатонах в контент внутри системы. 

Далее  контент  необходим  для  процесса  поиска  активности.  Под 
активностью подразумевается либо проект, либо мероприятие, либо хакатон. В 
процессе  поиска  активности  пользователь  все  равно  получает  информацию  об 
источниках получения опыта, даже если не захочет нигде участвовать. 

Все активности в системе поступают в процесс участия. После участия в 
проекте, мероприятие или хакатоне у пользователя появляется опыт командной 
разработки,  тем  самым  уровень  компетенций  повышается.  Приятным  бонусом 
будут являться достижения пользователя после участия в мероприятиях. 

26 

 
 
 
 
Рисунок 4.2 – Детализация концептуальной модели 

Детализация  процесса  «Авторизация»  показана  на  рисунке  4.3.  Процесс 
состоит  из  трех  подпроцессов:  регистрация,  вход  в  аккаунт  и  выход  из 
аккаунта. При регистрации необходимо пользовательское соглашение. Правила 
системы  управляют  всеми  процессами.  При  регистрации  информация  о 
пользователе  превращается  в  аккаунт  пользователя,  который  хранится  в 
системе.  Без  аккаунта  и  информации  о  пользователе  (email  и  пароль) 
невозможен  вход  в  аккаунт.  После  входа  в  аккаунт  в  системе  появляются 
участник  или  администратор,  которые  могут  при  необходимости  выйти  из 
системы и стать гостем. 

27 

 
 
 
 
Рисунок 4.3 – Детализация процесса «Авторизация» 

На  рисунке  4.4  показана  детализация  процесса  «Формирование 
контента». Под контентом подразумеваются проекты, хакатоны и мероприятия. 
Проект  создается  через  отправление  заявки  на  создание  проекта  участником  и 
рассмотрение  заявки  администратором.  Так  же  администратор  создает 
мероприятия,  хакатоны  и  управляет  агрегатором.  Для  работы  агрегатора 
необходимы сайты с хакатонами. 

Детализация  процесса  «Участие  в  активности»  на  рисунке  4  содержит  3 
подпроцесса:  участие  в  проекте,  участие  в  мероприятие  и  переход  на  другой 
сайт для участия в хакатоне. 

28 

 
 
 
Рисунок 4.4 – Детализация процесса «Формирование контента» 

Рисунок 4.5 – Детализация процесса «Участие в активности» 

29 

 
 
 
 
4.3 Проектирование вариантов использования 
В  данном  разделе  описаны  постановки  задач  и  подзадач  с  помощью 
сценариев  использования  в  нотации  UML  и  спецификаций  вариантов 
использования. В процессе разработки необходимо ориентироваться на данные 
сценарии,  они  показывают  работу  системы  при  определённых  действиях 
пользователя.  Выделено  4  задачи,  с  помощью  которых  пользователь  сможет 
достигнуть  тех  или  иных  целей,  которые  возможны  в  рамках  системы  «Биржа 
опыта»: 

 создание проекта; 
 участие в проекте; 
 участие в хакатоне; 
 проведение мероприятия. 
4.3.1 Вариант использования «Создание проекта» 
Сценарий  варианта  использования  «Создание  проекта»  показан  на 
рисунке  4.6.  Система  должна  позволять 
только 
авторизованному  пользователю.  Создание  проекта  предполагает  следующую 
последовательность  действий:  авторизованный  пользователь  подает  заявку  на 
создание  проекта  из  страницы  с  проектами,  затем  администратор  системы 
проверяет  заявку  и  принимает  решение  о  создании  или  отказе  в  создании 
проекта.  Данная  задача  предполагает  3  пользователей  (гость,  участник  и 
администратор) и реализацию как в серверной, так и в клиентской части. 

создавать  проект 

Рисунок 4.6 – Сценарий варианта использования «Создание проекта» 

30 

 
 
 
Спецификация варианта использования «Подача заявки на создание 

проекта». 

Цель: подать заявку на создание проекта  
Активные субъекты: Участник. 
Краткое  описание:  Участник  системы  создает  заявку  на  создание 

проекта. 

Предусловия: Участник должен авторизоваться в системе. 
быть 
Постусловия: 

выполнен 

вариант 

должен 

использования 

«Рассмотрение заявки на создание проекта». 

Основной поток событий:  

1.  Система  публикует  страницу  с  проектами,  на  которой  находится  кнопка 
«Создать  проект».  Если  пользователь  не  авторизован  после  нажатия 
кнопки система предлагает авторизоваться. 

2.  Активный субъект нажимает кнопку создания проекта. 
3.  Система  показывает  пользователю  информацию  о  том,  что  ему  нужно 
создать  заявку,  которую  рассматривает  администратор  проекта  и 
публикует форму с полями: название, тип проекта, описание, фотографии, 
теги  проекта,  максимальный  размер  команды.  Поле  тип  проекта  имеет 
значения  «учебный»  или  «уникальный».  Теги  для  проекта  выбираются  из 
уже существующих в системе. 

4.  Активный субъект заполняет поля формы. 
5.  Система проверяет данные в форме на валидность. 
6.  Активный субъект нажимает кнопку «Отправить заявку». 
7.  Система уведомляет пользователя об успешной или не успешной отправке 

заявки. 

8.  Система завершает работу варианта использования.   

Альтернативные потоки событий:  

1.  Система  демонстрирует  активному  субъекту  о  неправильном  заполнении 

полей в форме. 

2.  Система  демонстрирует  активному  субъекту  сообщение:  «Ошибка  при 

отправке заявки». 

Сценарий  обработки  ошибок:  при  возникновении  ошибки  отправки 
заявки  на  создание  поля  формы  сохраняют  свои  данные  и  позволяют 
пользователю заново отправить заявку. 

Спецификация  варианта  использования  «Рассмотрение  заявки  на 

создание проекта». 

Цель: рассмотреть заявку на создание проекта  
Активные субъекты: администратор, участник. 
Краткое  описание:  Администратор  рассматривает  поданные  заявки  на 
создание  проекта  и  принимает  решение.  В  конце  система  должна  уведомить 
участника о результате рассмотрения заявки. 

Предусловия:  Администратор  должен  быть  авторизован  в  системе  для 
просмотра  поданных  заявок  и  принятия  решения  по  ним.  Участник  должен 
авторизоваться в системе, чтобы увидеть результат заявки. 

31 

 
 
Постусловия: нет. 
Основной поток событий:  

1.  Система  публикует  страницу  для  управления,  на  которой  находятся 
дашборды.  Один  из  них  отвечает  за  показ  статистики  по  поданным  и  не 
рассмотренным заявкам.  

2.  Администратор нажимает на элемент дашборда со статистикой поданных 

заявок. 

3.  Система  показывает  администратору  страницу  с  заявками  на  создание 
заявка  имеет  статус:  отклонено,  создано,  не 
проекта.  Каждая 
рассмотрено.  Заявки  показываются  в  таблице  и  если  у  них  статус  не 
рассмотрено, то строка таблицы имеет кнопки «создать» и «отклонить». 

4.  Администратор нажимает на не рассмотренную заявку. 
5.  Система открывает страницу проекта с данными из заявки. 
6.  Администратор  читает  идею  проекта  и  принимает  решение  создавать 

проект или нет.  

7.  Администратор возвращается на страницу списка заявок. 
8.  Если  администратор  принимает  решение  о  создании  проекта,  то  должен 
нажать  на  кнопку  «Создать».  Если  администратор  не  хочет  создавать 
предложенный  проект,  то  ему  необходимо  нажать  на  кнопку 
«отклонить». 

9.  После нажатия любой из кнопок «создать» и «отклонить» система меняет 
статус проекта и уведомляет участника о результате рассмотрения заявки 
по почте.  

10.  Система завершает работу варианта использования.   

Альтернативные потоки событий: нет. 
Сценарий обработки ошибок: нет. 

Требования к реализации задачи 

Запросы, которые необходимо реализовать в REST API: 

 /api/projects GET Получение списка проектов; 
 /api/project POST Создание проекта; 
 /api/admin GET Получение информации для дашбордов; 
 /api/admin/project/request  GET  Получение  списка  заявок,  поданных  на 

создание проекта; 

 /api/project/:id  POST  Изменение  статуса  проекта  при  рассмотрении 

проекта. 
Страницы, которые необходимо реализовать в веб-приложении: 
 страница «Проекты» с кнопкой создания проекта; 
 страница «Подача заявки на создание проекта» с полями; 
 страница «Управление системой» с дашбордами; 
 страница «Заявки на создание проекта» со списком заявок. 
4.3.2 Вариант использования «Участие в проекте» 
Сценарий  варианта  использования  «Участие  в  проекте»  показан  на 
рисунке  4.7.  Система  должна  позволять  участвовать  в  проекте  только  для 

32 

 
 
авторизованного  пользователя.  Участие  в  проекте  состоит  из  следующих 
подзадач: подача заявки на участие в проекте, рассмотрение заявки на участие в 
проекте,  подведение  итогов  проекта.  В  задаче  участвуют  трое  пользователей: 
гость,  участник,  который  хочет  попасть  в  команду  для  реализации  проекта,  и 
участники,  уже  состоящие  в  команде.  Реализация  предполагается  как  в 
серверной, так и в клиентской части. 

Рисунок 4.7 – Сценарий варианта использования «Участие в проекте» 

Спецификация  варианта  использования  «Создание  команды  для 

участия в проекте». 

Цель: создание команды для участия в учебном проекте.  
Активные субъекты: участник, который хочет создать команду. 
Краткое описание: участник системы создает команду. 
Предусловия: участник должен авторизоваться в системе. 
быть 
Постусловия:  может 
«Рассмотрение заявки на участие». 

выполнен 

вариант 

использования 

33 

 
 
 
Основной поток событий:  

1.  Система публикует страницу с проектами.  
2.  Активный  субъект  выбирает  проект  для  участия,  открывая  проект  на 
отдельной странице с помощью кнопки «Подробнее» на карточке проекта. 
3.  Система  публикует  страницу  с  информацией  о  выбранном  проекте.  Если 
проект  учебный,  то  на  странице  отображается  список  команд,  которые 
исходя  из  статусов  участия  команды  в  проекте  либо  содержат,  либо  нет 
кнопку  «Подать  заявку».  Страница  проекта  должна  содержать  кнопку 
«Создать команду». 

4.  Активный субъект нажимает кнопку «Создать команду». 
5.  Система  показывает  пользователю  информацию  о  том,  что  ему  нужно 
создать  команду  и  публикует  форму  с  полями:  название  команды, 
количество  участников  и  роли  в  команде.  Роли  в  команде  выбираются  из 
готового списка, который может редактировать только администратор. 

6.  Активный субъект заполняет поля формы. 
7.  Система проверяет данные в форме на валидность. 
8.  Активный субъект нажимает кнопку «Создать команду». 
9.  Система уведомляет пользователя об успешном или не успешном создании 

команды. 

10.  Система завершает работу варианта использования.   

Альтернативные потоки событий:  

1.  Система  демонстрирует  активному  субъекту  о  неправильном  заполнении 

полей в форме. 

2.  Система  демонстрирует  активному  субъекту  сообщение:  «Ошибка  при 

создании команды». 

Сценарий  обработки  ошибок:  при  возникновении  ошибки  о 
создании  команды,  формы  сохраняют  свои  данные  и  позволяют 
пользователю заново отправить заявку. 

Спецификация  варианта  использования  «Подача 

заявки  на 

вступление в команду для реализации проекта». 
Цель: подать заявку на создание проекта  
Активные  субъекты:  участник,  который  хочет  попасть  в  команду 

для реализации проекта.  

Краткое  описание:  участник  системы  создает  заявку  на  участие  в 

проекте в рамках выбранной команды. 

Предусловия: участник должен авторизоваться в системе. 
Постусловия:  должен  быть  выполнен  вариант  использования 

«Рассмотрение заявки на участие». 

Основной поток событий:  

1.  Система публикует страницу с проектами.  
2.  Активный  субъект  выбирает  проект  для  участия,  открывая  проект  на 
отдельной странице с помощью кнопки «Подробнее» на карточке проекта. 
3.  Система  публикует  страницу  с  информацией  о  выбранном  проекте.  Если 
проект  учебный,  то  на  странице  отображается  список  команд,  которые 

34 

 
 
исходя  из  статусов  участия  команды  в  проекте  либо  содержат,  либо  нет 
кнопку «Подать заявку». Если проект уникальный, то на странице проекта 
указана  только  одна  команда,  у  которой  тоже  может  быть  или  не  быть 
кнопка «Подать заявку». 

4.  Активный субъект выбирает команду и нажимает кнопку «Подать заявку». 
5.  Система  показывает  пользователю  информацию  о  том,  что  ему  нужно 
создать  заявку,  которую  рассматривают  участники  выбранной  команды  и 
публикует форму с полями: желаемая роль в проекте, резюме в виде файла 
или  ссылки.  Желаемая  роль  в  проекте  выбирается  из  уже  созданных  и  не 
занятых ролей в команде. 

6.  Активный субъект заполняет поля формы. 
7.  Система проверяет данные на форме на валидность. 
8.  Активный субъект нажимает кнопку «Отправить заявку». 
9.  Система уведомляет пользователя об успешной или не успешной отправке 

заявки. 

10.  Система завершает работу варианта использования.   

Альтернативные потоки событий:  

1.  Система  демонстрирует  активному  субъекту  о  неправильном  заполнении 

полей в форме. 

2.  Система  демонстрирует  активному  субъекту  сообщение:  «Ошибка  при 

отправке заявки». 

Сценарий  обработки  ошибок:  при  возникновении  ошибки  отправки 
заявки  на  создание  поля  формы  сохраняют  свои  данные  и  позволяют 
пользователю заново отправить заявку. 

Спецификация  варианта  использования  «Рассмотрение  заявки  на 

участие в проекте». 

Цель: рассмотреть заявку на участие в проекте в определенной команде 
Активные  субъекты:  участник,  который  хочет  попасть  в  команду  для 

реализации проекта, и участники, уже состоящие в команде. 

Краткое описание: Участники, уже состоящие в проекте, рассматривают 
поданные  заявки  на  участие  в  их  команде  и  принимают  решение.  В  конце 
система  должна  уведомить  участника,  который  хочет  попасть  в  команду  для 
реализации проекта, о результате рассмотрения заявки. 

Предусловия:  Участники  должны  быть  авторизованы  в  системе  для 
просмотра  поданных  заявок  и  принятия  решения  по  ним.  Участник  должен 
авторизоваться в системе, чтобы увидеть результат заявки. 

Постусловия: 

должен 

быть 

выполнен 

вариант 

использования 

«Подведение итогов участия в проекте». 
Основной поток событий:  

1. 

2. 

Система публикует страницу с командами, в которых состоит  участник,  в 
рамках  личного  кабинета.  Каждая  команда  имеет  кнопку  «Подробнее»  и 
значок, появляющийся при наличии уведомления. 
Участник,  уже  состоящий  в  выбранной  команде,  нажимает  на  кнопку 
«Подробнее» определенной команды. 

35 

 
 
3. 

4. 

5. 

6. 

Система  показывает  участнику,  состоящему  в  команде,  страницу  с 
информацией о команде, ее участниках и желающих  участвовать, а также 
сведениями  об  участии  команды  в  проекте.  Каждая  заявка  на  участие 
имеет статус: отклонена, принята, не рассмотрена. Заявки показываются в 
таблице с полями: ФИО, желаемая роль, файл или ссылка на резюме. Если 
у  заявки  статус  не  рассмотрена,  то  строка  таблицы  имеет  кнопки 
«Принять» и «Отклонить» заявку.  
Участник,  состоящий  в  команде,  принимает  решение  о  принятии 
пользователя в команду или нет. Участнику необходимо нажать на кнопку 
«Принять»  или  «Отклонить»  заявку.  Из  всех,  состоящих  в  команде 
участников,  это  может  сделать  лишь  создатель  команды.  Отменить 
действие невозможно. 
После  нажатия  любой  из  кнопок  «Принять»  или  «Отклонить»  система 
меняет  статус  заявки  на  участие  и  уведомляет  участника  о  результате 
рассмотрения заявки по почте.  
Система завершает работу варианта использования.   

Альтернативные потоки событий: нет. 
Сценарий обработки ошибок: нет. 

Спецификация варианта использования «Подведение итогов участия 

в проекте». 

Цель: зафиксировать результат участия в проекте 
Активные субъекты: участники, уже состоящие в команде. 
Краткое описание: Один из участников, уже состоящих в команде, 

фиксирует результат об участии в проекте. 

Предусловия:  Участник  должен  авторизоваться  в  системе,  чтобы 

появилась возможность подведения итогов. 

Постусловия: нет. 
Основной поток событий:  

1. 

2. 

3. 

4. 

5. 

6. 
7. 

Система публикует страницу с командами, в которых состоит  участник,  в 
рамках  личного  кабинета.  Каждая  команда  имеет  кнопку  «Подробнее»  и 
значок, появляющийся при наличии уведомления. 
Участник,  уже  состоящий  в  выбранной  команде,  нажимает  на  кнопку 
«Подробнее» определенной команды. 
Система  показывает  участнику,  состоящему  в  команде,  страницу  с 
информацией о  команде, ее участниках и желающих  участвовать, а также 
сведениями  об  участии  команды  в  проекте.  Если  команда  еще  не 
подводила  итоги,  то  на  странице  команды  присутствует  кнопка 
«Сформировать итоги участия» 
Участник,  состоящий  в  команде,  нажимает  кнопку  «Сформировать  итоги 
участия»  
Система публикует страницу с формой подведения итогов со следующими 
полями: ссылка на решение, изображения результатов, отзыв в виде текста. 
Активный субъект заполняет поля формы. 
Система проверяет данные в форме на валидность. 

36 

 
 
8. 
9. 

10. 

Активный субъект нажимает кнопку «Сохранить». 
Система  уведомляет  пользователя  об  успешном  или  не  успешном 
сохранении результатов команды. 
Система завершает работу варианта использования.   

Альтернативные потоки событий: нет. 

1.  Система  демонстрирует  активному  субъекту  о  неправильном  заполнении 

полей в форме. 

2.  Система  демонстрирует  активному  субъекту  сообщение:  «Ошибка  при 

сохранении итогов». 

Сценарий обработки ошибок: при возникновении ошибки о сохранении 
итогов,  формы  сохраняют  свои  данные  и  позволяют  пользователю  заново 
сохранить итоги. 

Требования к реализации задачи 
Что необходимо реализовать в REST API: 

 /api/projects/:id/teams POST Создание команды для участия в проекте; 
 /api/users/:id/teams GET Получение списка команд пользователя; 
 /api/users/:id/teams/:id  POST  Изменение  статуса  у  заявки  участника  на 

выполнение проекта в определенной команде; 

 /api/events/:id/result POST Подведение итогов участия в проекте. 

Что необходимо реализовать в веб-приложении: 

 страница «Проекты» с кнопкой создания проекта; 
 страница  «Проект»  с  кнопкой  создания  команды  и  списком  команд, 

выполняющих проект; 

 страница «Команды» в личном кабинете, со списком команд, в которых 

состоит пользователь; 

 страница «Команда» с информацией о команде и ее  участниках, так же 

с поданными на вступление заявками; 

 страница «Подача заявки на вступление в команду» с формой ввода; 
 страница «Подведение итогов участия в проекте» с формой ввода. 
4.3.3 Вариант использования «Участие в хакатоне» 
Сценарий  варианта  использования  «Участие  в  хакатоне»  показан  на 
рисунке  4.8.  Система  должна  показывать  хакатоны  и  позволять  переходить  на 
сайты организаторов хакатонов. Участие в хакатоне не детализируется, потому 
что состоит из следующих действий пользователя: просмотр списка хакатонов, 
выбор интересующего, открытие страницы с информацией о хакатоне, нажатие 
на кнопку  «Записаться на  хакатон» и система открывает страницу  хакатона на 
сайте  организаторов.  Реализация  предполагается  как  в  серверной,  так  и  в 
клиентской части. В дальнейшем планируется добавить возможность собирать 
команду  на  хакатон  в  разрабатываемой  системе,  пока  что  на  данной  итерации 
проекта участие в хакатоне предполагает только переход в другую ИС. 

Отдельно  в  описании  задачи  необходимо  определить,  каким  образом 
хакатоны  будут  появляться  в  системе.  Администратор  может  создать  хакатон 
вручную, для этого в клиентской части необходимо разработать форму ввода, а 

37 

 
 
на серверной стороне необходимо создать POST запрос для создания хакатона. 
Однако,  предполагается  что  в  следующих  итерациях  разработки  будет  создан 
агрегатор проектов. Определим первоначальные требования к агрегатору: 
 агрегатор  должен  быть  реализован  отдельным  приложением, 

которое будет запускаться по инициативе из приложения REST API; 

 агрегатор  необходимо  реализовать  на  Python  [10],  с  помощью 

библиотек: 

 requests  —  для  отправления  запросов  на  страницы  в 

интернете; 

 beautifulsoup4 — для парсинга страниц; 
 sqlalchemy — для работ с БД; 
 источники  для  агрегатора  определены  в  требованиях  к  системе  в 

целом (п. 2.2); 

 на  административной  панели  должно  располагаться  управление 
агрегатором. Таблица с источниками для агрегатора должна содержать данные 
об  источниках,  количество  хакатонов  и  даты  парсинга.  Так  же  необходимо 
предусмотреть отключение некоторых из источников или подключение новых.; 

 агрегатор должен сам напрямую работать с базой данных; 
 агрегатор  получает  данные  с  сайтов-источников  с  помощью  двух 

методов: через обращение к API и через парсинг HTML кода. 

Рисунок 4.8 – Сценарий варианта использования «Участие в хакатоне» 

4.3.4 Вариант использования «Проведение мероприятия» 
Сценарий варианта использования «Проведение мероприятия» показан на 
создавать 

рисунке  4.9.  Система  должна  позволять 
мероприятия, участвовать в которых может только участник.  

администратору 

38 

 
 
 
 
Проведение  мероприятия  состоит  из  следующих  подзадач:  авторизация, 
создание  мероприятия,  выполнение  задания,  оценка  результатов  экспертами  и 
подведение результатов мероприятия. В задаче участвуют двое пользователей: 
участник и администратор. Реализация предполагается как в серверной, так и в 
клиентской части. 

Рисунок 4.9 – Сценарий варианта использования «Проведение 

мероприятия» 

4.4 Проектирование архитектуры системы 
Модель  состоит  из  4х  уровней,  на  данном  этапе  проектирования  будут 
спроектированы  3  уровня.  Четвертый  уровень  модели  подразумевает 
диаграмму кода, который будет определен после частичной реализации. 

Реализовать  систему  в  соответствии  с  требованиями  ТЗ  необходимо  в 

виде веб-приложения, HTTP сервера и агрегатора.  

39 

 
 
 
Рисунок 4.10 – Уровень 1. Схема системного контекста 

На  рисунке  4.10  изображена  диаграмма  контекста  системы,  которая 
показывает,  что  «Биржа  опыта»  должна  взаимодействовать  с  системой  Email 
для  отправки  писем  пользователю,  а  также  сайтами  с  хакатонами  для 
агрегирования данных. 

40 

 
 
 
 
Рисунок 4.11 – Уровень 2. Схема контейнеров 

На рисунке 4.11 изображена диаграмма контейнеров, которая отображает 
концептуальную  архитектуру  системы  «Биржа  опыта».  Система  должна 
состоять  из  веб-приложения  (клиент),  HTTP  сервера  (сервер),  агрегатора,  а 
также самой БД. Веб-приложение должно взаимодействовать с HTTP сервером 
через HTTP протокол в JSON формате. 

41 

 
 
 
 
Рисунок 4.12 – Уровень 3. Схема компонентов веб-приложения 

На рисунке 4.12 показана схема компонентов веб-приложения: страницы, 

компоненты, хранилище и роутер. 

42 

 
 
 
 
Рисунок 4.13 – Уровень 3. Схема компонентов HTTP сервер 

На  рисунке  4.13  находится  схема  компонентов  HTTP  сервер,  а  именно 
модулей: 
должны 
events, 
взаимодействовать с БД через библиотеку  TypeORM. Так же модуль  hackatons 
управляет агрегатором. С почтой взаимодействует модуль users. 

users.  Все  модули 

hackatons, 

projects, 

43 

 
 
 
4.5 Проектирование базы данных 
В  данном  разделе  выполнено  проектирование  модели  данных  из 
сущностей,  определенных 
задании:  проект,  хакатон, 
техническом 
мероприятие,  пользователь,  команда.  В  процессе  проектирования  были 
приняты следующие решения: 

в 

 проекты,  мероприятия  и  хакатоны  объединить  в  одну  сущность  с 
названием  «Событие»  по  причине  наличия  одинаковых  полей  (для  различия 
было создано поле «Тип события: мероприятия, проект, хакатон»); 

 созданы  идентификаторы  у  всех  сущностей  для  более  удобного 

хранения связей; 

 некоторые поля имеют тип данных массив, для упрощения хранения; 
 создать  сущность  голосования  для  оценки  результатов  события 

экспертами; 

 пользователя  и  команду  связывают  сущности  функция  и  функция 

пользователя (это необходимо для фиксирования роли участника в команде). 

 результат  события  вынесен  в  отдельную  сущность,  для  возможности 

создания нескольких результатов разных команд на одно событие. 

В  результате,  получившаяся  логическая  модель  данных  показана  на 
рисунке  4.14.  Она  содержит  10  сущностей.  В  дальнейшем  модель  будет 
расширяться  по  необходимости,  однако  на  данный  момент  существующих 
сущностей и атрибутов достаточно для реализации первой версии системы. 

44 

 
 
 
Рисунок 4.14 – Логическая модель данных 

В  таблице  4.1  представлено  сопоставление  сущностей  из  логической 

модели данных и физической модели данных. 

45 

 
 
 
 
 
Таблица 4.1 – Описание полей базы данных 

Сущность 

Таблица 

Атрибут 

Поле 

окончания 

окончания 

мероприятия: 

события: 
проект, 

Идентификатор 
Тип 
мероприятия, 
хакатон 
Тип  проекта:  учебный, 
уникальный 
Тип 
хакатон, челлендж 
Ссылки на изображения 
Описание 
Идентификатор 
создателя события 
Идентификаторы тегов 
Дата начала события 
Дата 
события 
Максимальный  размер 
команды 
Время 
регистрации 
Описание приза 
Статус: 
не 
просмотрено,создано,не 
создано 
Идентификатор 
Фамилия 
Имя 
Отчество 
Логин 
Дата рождения 
Телефон 
Email 
Пол 
Список разрешений 
Описание 
Изображение 
Пароль 
Идентификатор 
Идентификатор 
пользователя 
Идентификатор 
функции 
Дата начала 
Дата окончания 
Статус:  не  просмотрен, 
взят  в  команду,  не  взят 
в команду 

46 

Событие 

events 

Пользователь 

users 

Функция 
пользователя 

user_functions 

Тип 
данных 
int 
enum 

Ключ 

PK 

id 

type 

type_project 

type_events 

images 
descriptions 

creator_id 

tags 
date_start 

enum 

enum 

string[] 
string 
int 

int[] 
datetime 

date_end 

datetime 

team_size 

string 

last_time_ 
registration 
prize 

datetime 

string 

status 

enum 

id 
last_name 
name 
patronymic 
username 
birthdate 
phone 
email 
gender 
permission 
bio 
image 
password 
id 

user_id 

function_id 

date_start 
date_end 

int 
string 
string 
string 
string 
date 
string 
string 
string 
string[] 
string 
string 
string 
int 
int 

int 

date 
date 

status 

enum 

FK 

PK 

PK 

FK 

FK 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Продолжение таблицы 4.1 

Сущность 

Таблица 

Атрибут 

Поле 

Тип 
данных 

Ключ 

Функция 
пользователя 

user_functions 

Функция 

functions 

Команда 

teams 

Результат 
события 

result_events 

Голосование 

voting 

Тег 

tags 

Достижения 

achievements 

users_ 
achievements 

Достижения 
пользователей 

на 

Ссылка 
на 
резюме/портфолио 
Идентификатор 
Идентификатор 
команды 
Название 
Идентификатор 
Название 
Размер команды 
Идентификатор 
Идентификатор 
события 
Идентификатор 
команды 
Ссылка на решение 
Отзыв 
о 
выполнении 
события 
Ссылки 
изображения 
Место 
Идентификатор 
Идентификатор 
результата события 
Идентификатор 
эксперта 
Дата и время 
Название критерия 
Комментарий 
Оценка 
Идентификатор 
Название 
Описание 
Идентификатор 
Название 
Ссылка 
изображение 
Идентификатор 
Идентификатор 
пользователя 
Идентификатор 
достижения 
Дата и время 

на 

linkInfoUser 

string 

id 

team_id 

title 
id 
title 
team_size 
id 

event_id 

team_id 

link_solution 

feedback 

images 

place 
id 

result_event_id 

user_id 

date 
title_criterion 
comments 
linkInfoUser 
id 
title 
description 
id 
title 

image 

id 

user_id 

achievement_id 

int 

int 

string 
int 
string 
int 
int 
int 

int 

date 
date 

string[] 

string 
int 
int 

int 

date 
date 
string 
string 
int 
string 
string 
int 
string 
string 

int 
int 

int 

datetime 

datetime 

PK 

FK 

PK 

PK 

FK 

FK 

PK 
FK 

FK 

PK 

PK 

PK 
FK 

FK 

Физическая  модель  данных  была  спроектирована  с  учетом  СУБД 

PostgreSQL в сервисе DrawSQL [11] и отображена на рисунке 4.15. 

47 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Рисунок 4.15 – Физическая модель данных 

4.6 Проектирование пользовательского интерфейса 
Ниже приведены примеры макетов, сделанных в онлайн  – сервисе  Figma 
[12].  Макеты  сделаны  в  виде  набросков  структуры  страниц  разрабатываемой 
системы.  

48 

 
 
 
Рисунок 4.20 – Страница проектов 

Рисунок 4.21 – Страница для управления системой 

49 

 
 
 
 
Рисунок 4.22 – Страница «Профиль» 

Рисунок 4.23 – Страница «Проект» 

50 

 
 
 
 
Рисунок 4.24 – Страница «Создание проекта» 

Рисунок 4.25 – Логотип 

51 

 
 
 
 
 
 
5 Реализация приложения 
После  проектирования  была  выполнена  реализация  MVP.  Для 
демонстрации  смысла  системы  был  выбран  вариант  использования  «Создание 
проекта».  Для  его  реализации  так  же  понадобилось  реализовать  авторизацию, 
регистрацию и личный кабинет. В данном разделе показано текущее состояние 
системы. 

5.1 Описание возможностей текущей версии 
Система состоит из 3 разных программ: веб-приложение,  HTTP сервер  и 
агрегатор. Исходя из этого описание реализованных функций разделено на веб-
приложение  и  HTTP  сервер.  Работы  по  реализации  агрегатора  на  данный 
момент не выполнялись. 

Страницы, реализованные согласно макетам и структуре страниц: 
 страница «Главная»; 
 страница «Авторизация»; 
 страница «Регистрация»; 
 страница «Проекты»; 
 страница «Хакатоны»; 
 страница «Мероприятия»; 
 страница «Профиль»; 
 страница «Административная панель»; 
 страница «Создание проекта»; 
 страница «Создание хакатона»; 
 страница «Заявки на создание проекта»; 
 страница «Создание команды для проекта». 
Перечень  API  запросов,  реализованных  на  стороне  сервера  показан  в 

таблице 5.1. 

Таблица 5.1 – Реализованные API запросы 

Путь 

/api/projects 
/api/projects/:id/ 
/api/projects/:id/team 

Метод 
GET 
GET 
GET 

/api/tags 
/api/project 
/api/admin 

/api/admin/project/ 
requestCreateProject/count 
/api/admin/project/ 
requestCreateProject 

Назначение 

Получение списка проектов 
Получение информации о проекте 
Получение  списка  команд,  которые 
участвуют/участвовали в проекте 
Получение списка тегов 

GET 
POST  Создание проекта 
Получение 
GET 
дашбордов 
Получение 
поданных на создание проекта 
Получение списка заявок, поданных на 
создание проекта 

информации 

количества 

заявок, 

GET 

GET 

для 

52 

 
 
 
 
Продолжение таблицы 5.1 

Путь 

/api/project/:id 

/api/hackatons 
/api/events 
/api/users/login 
/api/users/logout 
/api/users 
/api/users/user 

Метод 
POST  Изменение 

Назначение 
статуса 
рассмотрении проекта 
Получение списка хакатонов 
Получение списка мероприятий 

проекта 

GET 
GET 
POST  Авторизация 
POST  Выход из профиля 
POST   Регистрация 
POST   Получение 

информации 

при 

о 

пользователе, если он авторизован 

Исходя  из  вышеперечисленного,  можно  повести  итог  о  реализованных 

функциях в каждой подсистеме. 

На  данный  момент  в  подсистеме  проектов  реализованы  следующие 

функции: 

  просмотр списка проектов; 
  просмотр  информации  о  проекте:  название;  описание;  изображения; 
его 
проекта 

(уникальный/учебный); 

которые 

команд, 

список 

тип 
выполняют/выполнили; 

  отправление заявки на создание проекта администратору. 
В подсистеме личного кабинета реализованы следующие функции: 
 регистрация с помощью email, пароля и логина пользователя; 
 авторизация с помощью email и пароля; 
 просмотр  личного  кабинета:  информация  о  профиле,  список 

достижений пользователя. 

На  этапе  MVP  в  подсистеме  административная  панель  реализованы 

следующие функции: 

 просмотр  списка  поданных  на  рассмотрение  заявок  для  создания 

проектов; 

 рассмотрение заявки на создание проекта в административной панели, в 

результате проект приобретает статус (создан, не создан). 

В подсистеме мероприятий реализована функция: 
 просмотр списка мероприятий. 
На  данный  момент  в  подсистеме  хакатонов  реализованы  следующие 

функции: 

 просмотр списка хакатонов. 
Исходя  из  вышеописанных  возможностей,  можно  сделать  вывод  что  для 
полной  реализации  первой  версии  необходимо  разработать  еще  3  варианта 
использования.  Так  же  необходимо  продумать  дизайн  сайта,  потому  что  на 
этапе MVP этому не было выделено внимание. 

5.2 Демонстрация варианта использования «Создание проекта» 
В  пункте  4.3.1  был  определен  вариант  использования  «Создание 

проекта», который будет продемонстрирован ниже. 

53 

 
 
 Первое, что видит пользователь, попадая на сайт – главная страница (рис. 
5.1).  Для  того  что  бы  создать  проект,  необходимо  перейти  на  страницу  с 
проектами  (рис.  5.2)  с  помощью  меню.  Так  как  система  должна  позволять 
создавать  проект  только  авторизованному  пользователю,  при  нажатии  на 
кнопку  «Создать  проект»  система  открывает  страницу  авторизации  (рис.  5.3). 
Пользователь  авторизуется  и  возвращается  к  странице  проектов,  где  еще  раз 
нажимает на кнопку «Создать проект». Система открывает форму с полями для 
создания  проекта  (рис.  5.4).  Пользователь  заполняет  поля  формы  (рис.  5.4)  и 
отправляет заявку. Система возвращает пользователя на страницу проектов. 

Администратор  авторизуется  и  видит  уведомления  в  меню  (рис.  5.5). 
Администратор  переходит  в  административную  панель  и  видит,  что  у  него  4 
заявки на создание проекта (рис. 5.6). Администратор открывает все заявки на 
создание  проекта  и  видит  таблицу  с  проектами  (рис.  5.7).  Администратор 
принимает решение о создании проекта «Тестовый проект» и нажимает кнопку 
«Создать»  напротив  проекта.  Проект  получает  статус  «created»  (рис.  5.8).  В 
списке проектов появляется созданный проект (рис. 5.9). 

Рисунок 5.1 – Страница «Главная» 

54 

 
 
 
Рисунок 5.2 – Страница «Проекты» 

Рисунок 5.3 – Страница «Авторизация» 

55 

 
 
 
 
 
Рисунок 5.4 – Страница «Создание проекта» 

Рисунок 5.5 – Страница «Профиль» 

Рисунок 5.6 – Страница «Административная панель» 

56 

 
 
 
 
 
 
Рисунок 5.7 – Страница «Заявки на создание проекта» 

Рисунок 5.8 – Страница «Заявки на создание проекта» с созданным проектом 

57 

 
 
 
 
 
Рисунок 5.9 – Страница «Заявки на создание проекта» 

58 

 
 
 
 
 
6 Экономическая часть 
При  расчете 

экономической  части  предполагается  использовать 
программный  продукт  Microsoft  Project,  для  разработки  календарного  плана, 
распределения ресурсов и последующего анализа. Для понимания изображений 
и  прочих  материалов  из  данной  программы  рекомендуется  ознакомиться  со 
справкой для пользователя [13]. 

Выбор  комплекса  работ  по  разработке  проекта  производится  в 
соответствии  с  требованиями  к  составу  и  содержанию  работ  по  созданию 
системы (пункт 2.6). 

Разработка системы не производится для заказчика или передачи другим 
лицам в дальнейшем. Система не преследует коммерческие цели, однако, важно 
рассчитать  затраты  на  создание  ПО  из-за  возможных  доходов  в  дальнейшем. 
Например,  при  высоких  метриках  посещаемости  сайта  возможно  внедрение 
рекламы от заинтересованных лиц. Так  же можно предусмотреть  возможность 
сбора финансов краудфандингом для окупаемости и развития проекта. 

Созданием  системы  на  всех  этапах  занимается  один  разработчик  в  свое 
свободное от основных занятий время, так как это является его инициативой. В 
связи с этим, для расчета затрат было принято решение присвоить разработчику 
статус «Плательщик налога на профессиональный доход» (самозанятый). Из-за 
с  данного  статусом,  страховые  взносы  и  налоги  не  учитываются.  Однако,  в 
случае  продажи  или  передачи  системы  в  пользование  другим  лицам  по 
лицензионному  договору  необходимо  учесть  налог  на  профессиональный 
доход: 4 % при передачи физическому лицу и 6% при передаче юридическому 
лицу.  

Так же, необходимо понимать, что на этапе разработки все затраты несет 

разработчик. 

Для  расчета  стоимости  проекта  необходимо  определить  задачи  и 
подзадачи  (рис.  6.1).  Так  же  важно  распределить  порядок  выполнения  каждой 
задачи  (рис.  6.2).  После  этого  необходимо  определить  длительность  задач  в 
часах.  На  рисунке  6.1  показан  лист  задач.  Общая  длительность  проекта  527 
рабочих часов с 01.10.22 по 15.05.23.  

59 

 
 
Рисунок 6.1 – Лист задач 

60 

 
 
Рисунок 6.2 – Диаграмма Ганта 

После  определения  календарного  плана  необходимо  определить  ресурсы 
и их стоимость (рис. 6.3). Заработная плата разработчика была взята исходя из 
средней  по  рынку  для  данной  квалификации  [14].  Помимо  разработчика  в 
процессе участвует технический консультант. Он помогает принимать решения 
в  проектировании  и  решать  сложные  вопросы  при  разработке.  Стоимость  его 
заработной  платы  составляет  500  рублей  в  час.  При  реализации  системы 
необходимо  провести  консультацию  с  юристом  для  создания  юридических 
документов  (пользовательское  соглашение).  Стоимость  консультации  равна 
10 000р.  Из-за  отсутствия  достаточных  навыков  разработки  дизайна  системы 
разработчику  необходимо  пройти  курс  по  дизайну  сайтов  (10 000р.),  создать 
свой  дизайн  и  затем  провести  консультацию  с  дизайнером  (2 000р)  для 
выявления  проблем.  Такое  решение  проблемы  дешевле,  потому  что  стоимость 
работ  по  созданию  дизайна  с  нуля  начинается  от  30 000р.  Для  разработки 
необходим обязательно ПК, но приобретение нового слишком дорого. Поэтому 
было  принято  решение  использовать  личный  ноутбук.  Так  же  для  работы 
необходим интернет, бумага, канцелярия и арендованный хостинг. Все ресурсы 
показаны на рисунке 6.3. 

61 

 
 
 
 
Рисунок 6.3 – Лист ресурсов 

Рисунок 6.4 – Диаграмма Ганта с ресурсами 

62 

 
 
 
 
После  определения  задач  и  ресурсов  необходимо  каждой  задаче 
назначить  ресурсы.  Во  всех  задачах  используется  большинство  ресурсов.  Был 
установлен  календарный  план:  разработчик  работает  над  проектом  каждый 
день  по  2  часа  7  дней  в  неделю,  с  31.12.2022  по  05.01.2023  выходные  из-за 
новогодних праздников, а в мае 2023 года рабочий день с 11:00 до 19:00 из-за 
преддипломной практики. Благодаря назначению ресурсов (рис. 6.4) появилась 
возможность  узнать  общую  стоимость  разработки  проекта.  На  рисунке  6.5 
показан отчет «Обзор затрат». Общая сумма затрат составляет 253 257,50р. Так 
же на рисунке присутствуют диаграммы, которые отображают состояние затрат 
и  ход  выполнения  относительно  затрат.  Самым  дорогим  является  этап 
реализации, а затем идет этап анализа. 

Рисунок 6.5 – Отчет «Обзор затрат» 

Планирование  и  расчет  затрат  на  создание  системы  показал,  что 
стоимость  готового  программного  продукта  составляет  253  257  р.  при 
длительности разработки около 7,5 месяцев.  

63 

 
 
 
 
 
 
Заключение 
В  результате  курсового  проекта  была  разработана  и  частично 
реализована  система,  которая  отвечает  поставленной  цели,  а  именно: 
сопровождение  процесса  повышения  уровня  компетенций  в  командной 
разработке  посредством  нетворкинга.  В  процессе  разработки  были 
решены следующие задачи: 

1. Выполнен анализ предметной области; 
2. Сформированы требования к системе; 
3. Выполнено проектирование системы; 
4. Реализовано MVP; 
5. Выполнен расчет экономической части; 
6. Составлен отчёт по всей проделанной работе. 
Выполнение  задач  привело  к  следующему  результату:  реализовано 
12 страниц в веб-приложении, а также 15 API запросов в HTTP сервере. В 
результате  получился  минимально  жизнеспособный  продукт,  который 
станет  фундаментом  при  выполнение  выпускной  квалификационной 
работы. 

В дальнейшем планируется полная реализация, проработка дизайна, 
ввод  в  действие,  продвижение  и  развитие  сайта.  Так  же  была  выявлена 
потребность  в  реализации  дополнительных  особенностей  системы: 
(агрегирование  информации  о 
интеграция  с  другими  сервисами 
пользователе),  авторизация  с  помощью  сторонних  систем,  мобильная 
верстка, рассылка новостей и автоматизирование модерации, с помощью 
применения библиотек фильтрации нецензурной лексики. 

Исходный код приложения опубликован в публичном репозитории 

на сервисе GitHub [15]. 

64 

 
 
 
Список использованных источников 
1. Хакатоны:  как  они  устроены,  как  проходят  и  чем  отличаются  от 
URL: 

чемпионатов 
https://tproger.ru/articles/hakatony-kak-oni-ustroeny-kak-prohodjat-i-chem-
otlichajutsja-ot-chempionatov-po-analizu-dannyh/ (дата обращения: 05.10.2022). 

данных? 

анализу 

Tproger 

по 

// 

2. ГОСТ  34.602—  2020.  Информационные  технологии.  Комплекс 
стандартов  на автоматизированные системы. Техническое задание на создание 
автоматизированной  системы.  –  Взамен  ГОСТ  34.602—  89;  Москва: 
Российский институт стандартизации, 2021. – 12 с. 
опыта" 
сайта 

3. Структура 

Octopus.do 

"Биржа 

URL: 

// 

https://octopus.do/nwi79o50tnl (дата обращения: 15.11.2022). 

4. РД  IDEF0  -  2000.  Методология  функционального  моделирования 

IDEF0. Руководящий документ.; Москва: Госстандарт России, 2000. – 75 с. 

5. Ramus  Educational  1.1 

//  Software.Informer  URL:  https://ramus-

educational.software.informer.com/ (дата обращения: 07.12.2022). 

6. The  C4  model  for  visualising  software  architecture  //  С4model  URL: 

https://c4model.com/ (дата обращения: 22.12.2022). 
JavaScript-фреймворк 
https://v3.ru.vuejs.org/ (дата обращения: 25.12.2022). 

7. Прогрессивный 

// 

Vue.js 

URL: 

8. A  progressive  Node.js  framework  //  NestJS  URL:  https://nestjs.com/  (дата 

обращения: 27.12.2022). 

9. The  most  popular  HTML,  CSS,  and  JS  library  in  the  world.  //  Bootstrap 

URL: https://getbootstrap.com/ (дата обращения: 05.01.2023). 

10. Web 

// 
с 
https://habr.com/ru/post/280238/ (дата обращения: 07.01.2023). 

помощью 

Scraping 

python 

Habr 

URL: 

11. Физическая  модель  данных  "Биржа  опыта" 

//  DrawSQL  URL: 

https://drawsql.app/teams/ne-izvestno/diagrams/fizicheskaya-model-dannyh-birzha-
opyta (дата обращения: 30.12.2022). 

12. Макеты 

URL: 
https://www.figma.com/file/MwEZrUat1v0jSNV96TtIvO/%D0%91%D0%B8%D1%
80%D0%B6%D0%B0-%D0%BE%D0%BF%D1%8B%D1%82%D0%B0?node-
id=0%3A1&t=PCfel2ChGh8bvDHC-1 (дата обращения: 01.12.2022). 

Биржа 

опыта 

Figma 

// 

13. Справка  и  обучение  по  Project 

//  Microsoft  Office  URL: 

https://support.microsoft.com/ru-ru/project (дата обращения: 02.11.2022). 

14. Зарплаты:  Junior  разработчик,  Россия  |  декабрь  2022  года  //  Zarplan 
URL:  https://zarplan.com/zarplata/JUNIOR%20РАЗРАБОТЧИК/РОССИЯ/  (дата 
обращения: 20.01.2023). 
15. Репозиторий experience_market // GitHub URL: 
https://github.com/KomogortsevaYulia/experience_market (дата обращения: 
01.11.2022). 

65 

 
Таблица А.1 – Обзор аналогов 

Приложение А 
Таблицы 

№ 

1 

2 

3 

4 

5 

6 

- 

участников 

Цель и/или описание сервиса 
Хабр Фриланс(проекты) - Биржа фриланса, есть модуль проекты 
и специалисты, однако все направлено на ЗП 
https://freelance.habr.com/tasks 
Russian  Hackers 
хакатонов, 
сообщество 
разработчиков,  предпринимателей.  Мы  рассказываем,  организуем 
и делимся экспертизой о хакатонах 
https://russianhackers.org/hackathons 
Leader-ID - мероприятия, коворкинги, сообщества и  «социальные 
лифты».  Leader-ID  помогает  работать,  учиться  и  находить 
единомышленников в любом городе 
https://leader-id.ru/ 
ODS  -  Международное  сообщество,  объединяющее  специалистов, 
исследователей и инженеров, связанных с Data Science 
https://ods.ai/ 
HACKATHONS.PRO 
соревнования, 
программированию и разработке, проходящие в России и мире. 
https://hackathons.pro/ 
Хакатоны.рф  -  На  открытом  ресурсе  регулярно  публикуются 
актуальные данных о предстоящих хакатонах. 
https://www.хакатоны.рф/ 

агрегируем  интересные  ИТ-
по 

чемпионаты, 

олимпиады 

хакатоны, 

-  Мы 

1 

2 

3 

4 

5 

6 

7 

8 

9  Итог 

Да 

1 

1 

0 

0 

0 

ru  1 

0 

3 

Да 

0 

0 

1 

0 

1 

ru  1 

1 

4 

Да 

0 

0 

1 

1 

1 

ru  1 

1 

5 

Нет  1 

1 

1 

1 

0 

ru  0 

0 

4 

Да 

0 

0 

1 

0 

1 

ru  0 

1 

3 

Да 

0 

0 

1 

0 

1 

ru  1 

1 

4 

66 

 
 
 
 
 
Продолжение таблицы А.1 

№  Цель и/или описание сервиса 

Codenrock  -  компания  организации  хакатонов.  Участвуйте  в 
онлайн  и  офлайн  хакатонах,  чтобы  создавать  новые  продукты, 
практиковать  навыки,  изучать  технологии,  выигрывать  призы  и 
развивать нетворкинг 
https://codenrock.com/ 
ФИЗТЕХ  ДЖЕНЕЗИС  –  компания  организации  хакатонов  для 
взаимовыгодного развития бизнеса и IT-специалистов. 
https://pgenesis.ru/events 
What  to  Code?  -  было  создано  во  время  пандемии  для  помощи 
разработчикам  собирать  идеи  для  их  следующего  проекта  по 
кодированию. 
https://what-to-code.com/ 
Programming  Challenges  -  сервис  с  рулеткой  проектов.  Проекты 
добавлять нельзя, список фиксирован. 
https://programming-challenges.jeremyjaydan.dev/ 
-  глобальная  онлайн-программа 
Google  Summer  of  Code 
наставничества, направленная на привлечение новых участников к 
разработке  программного  обеспечения.  Участники  работают  над 
12-недельным  проектом  по  программированию  под  руководством 
наставников из их организации. 
https://summerofcode.withgoogle.com/archive/2021/organizations 
Devpost  -  создавайте  продукты,  практикуйте  навыки,  изучайте 
технологии, выигрывайте призы и расширяйте свою сеть. 
https://devpost.com/ 

7 

8 

9 

10 

11 

12 

1 

2 

3 

4 

5 

6 

7 

8 

9  Итог 

Да 

0 

0 

1 

1 

1 

ru  1 

1 

5 

Да 

0 

0 

1 

1 

1 

ru  1 

1 

5 

Да 

1 

1 

0 

0 

0  en  0 

1 

3 

Нет  1 

0 

0 

0 

0  en  0 

1 

2 

Нет  1 

0 

0 

0 

1  en  0 

0 

2 

Да 

1 

1 

1 

1 

1  en  1 

1 

7 

67 

 
 
 
 
Продолжение таблицы А.1 

№  Цель и/или описание сервиса 

1 

2 

3 

4 

5 

6 

7 

8 

9  Итог 

13 

14 

15 

16 

17 

Календарь  мероприятий  экосистемы  НТИ-2022  -  здесь  вы 
найдете  информацию  о  готовящихся  хакатонах  и  олимпиадах, 
школах,  крупнейших  отраслевых  форумах  и  акселераторах  в  2022 
году.  Выбирайте  самые  интересные  события  и  до  встречи  на 
мероприятиях! 
https://2035.events/ 
Хакатоны.рус  -  проект  создан  АНО  "Цифровая  молодежь"  для 
агрегации IT-соревнований,  хакатонов, чемпионатов, олимпиад по 
программированию и разработке, проходящих в России. 
https://хакатоны.рус/ 
Kaggle - система организации конкурсов по исследованию данных, 
а  также  социальная  сеть  специалистов  по  обработке  данных  и 
машинному обучению. 
https://www.kaggle.com/ 
КиберФорум 
системных 
администраторов.  Бесплатная  помощь  в  решении  задач  связанных 
с IT. 
https://www.cyberforum.ru/ 
Xeomate  -  бесплатный  сервис  для  поиска  единомышленников. 
Xeomate  Вы  можете  найти  команду  для  стартапа  или  хакатона, 
найти  менторов,  учеников,  инвесторов,  а  также  друзей  для 
простого общения. 
https://app.xeomate.com/platform/profile-list 

программистов 

форум 

и 

- 

Да 

0 

0 

1 

0 

0 

ru  1 

1 

3 

Да 

0 

0 

1 

0 

1 

ru  1 

1 

5 

Да 

1 

1 

0 

0 

1  en  1 

0 

5 

Нет  0 

0 

0 

0 

0 

ru  0 

0 

0 

Нет  0 

1 

0 

1 

0 

ru  1 

0 

3 

68 

 
 
